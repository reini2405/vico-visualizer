#!/usr/bin/env python3
import argparse
import os
import subprocess
import shutil

DEBUG_DIR = os.path.abspath("./vico_tmp")
os.makedirs(DEBUG_DIR, exist_ok=True)

LOGFILE = os.path.join(DEBUG_DIR, "ffmpeg.log")

def parse_args():
    parser = argparse.ArgumentParser(description="Kombiniert Videos mit Audio (loop, ping-pong, crossfade, sicher)")
    parser.add_argument("-a", "--audio", required=True, help="Audiodatei (z. B. Bass.wav)")
    parser.add_argument("-v", "--videos", nargs="+", required=True, help="Videoclips in gewünschter Reihenfolge")
    parser.add_argument("-r", "--reverse", action="store_true", help="Ping-Pong-Modus")
    parser.add_argument("--rc", action="store_true", help="Ping-Pong Einzelclips mit Crossfade zwischen Vor/Rückwärts")
    parser.add_argument("-c", "--crossfade", type=float, default=0, help="Crossfade in Sekunden")
    parser.add_argument("--fps", type=int, default=30, help="Bildrate pro Sekunde")
    return parser.parse_args()

def prepare_videos(videos):
    results = []
    for i, v in enumerate(videos):
        out = os.path.join(DEBUG_DIR, f"noaudio_{i}.mp4")
        subprocess.run([
            "ffmpeg", "-y", "-i", v, "-an",
            "-c:v", "copy", out
        ], check=True)
        results.append(out)
    return results

def get_duration(path):
    try:
        out = subprocess.check_output([
            "ffprobe", "-v", "error",
            "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1",
            path
        ]).strip()
        return float(out)
    except:
        return 0.0

def create_pingpong_videos(videos):
    result = []
    for i, v in enumerate(videos):
        basename = os.path.splitext(os.path.basename(v))[0]
        normal = os.path.join(DEBUG_DIR, f"{basename}_fwd.mp4")
        reversed_path = os.path.abspath(os.path.join(DEBUG_DIR, f"{basename}_rev.mp4")).replace("\\", "/")
        shutil.copy(v, normal)
        subprocess.run([
            "ffmpeg", "-y", "-i", v,
            "-vf", "reverse", "-an", reversed_path
        ], check=True)
        result.append(normal)
        result.append(reversed_path)
    return result

def create_pingpong_blocks(videos):
    result = []
    for i, v in enumerate(videos):
        basename = os.path.splitext(os.path.basename(v))[0]
        fwd = os.path.abspath(os.path.join(DEBUG_DIR, f"{basename}_fwd.mp4")).replace("\\", "/")
        rev = os.path.abspath(os.path.join(DEBUG_DIR, f"{basename}_rev.mp4")).replace("\\", "/")
        out = os.path.abspath(os.path.join(DEBUG_DIR, f"{basename}_pingpong.mp4")).replace("\\", "/")
        list_file = os.path.join(DEBUG_DIR, f"{basename}_list.txt")

        # Erzeuge Forward-Clip durch echtes Re-Encoding (nicht nur copy)
        subprocess.run([
            "ffmpeg", "-y", "-i", v, "-an",
            "-c:v", "libx264", "-preset", "ultrafast", fwd
        ], check=True)

        # Erzeuge Reverse
        subprocess.run([
            "ffmpeg", "-y", "-i", v,
            "-vf", "reverse", "-an", "-c:v", "libx264", "-preset", "ultrafast", rev
        ], check=True)

        # Erstelle Liste
        with open(list_file, "w") as f:
            f.write(f"file '{fwd}'\n")
            f.write(f"file '{rev}'\n")

        # Concat Forward + Reverse
        subprocess.run([
            "ffmpeg", "-y", "-f", "concat", "-safe", "0",
            "-i", list_file,
            "-c:v", "libx264", "-preset", "ultrafast", out
        ], check=True)

        print(f"[DEBUG] PingPong gebaut: {out}")
        result.append(out)
    return result

def build_ffmpeg_concat(videos, output_path, crossfade=0, fps=30):
    inputs = []
    n = len(videos)

    print(f"[DEBUG] Anzahl Videos für Crossfade: {n}")
    
    if crossfade > 0:
        if n == 1:
            print("[DEBUG] Nur ein Video vorhanden – Crossfade wird übersprungen.")
            subprocess.run([
                "ffmpeg", "-y", "-i", videos[0],
                "-an", "-c:v", "libx264", "-preset", "ultrafast", "-r", str(fps),
                output_path
            ], check=True)
            return

        durations = [get_duration(v) for v in videos]
        for v in videos:
            inputs.extend(["-i", v])

        filter_parts = []
        xfade_parts = []
        current_offset = 0.0

        for i in range(n):
            filter_parts.append(f"[{i}:v]format=yuv420p,setsar=1[v{i}];")

        for i in range(n - 1):
            v_in = f"v{i}" if i == 0 else f"xfv{i - 1}"
            offset = current_offset
            xfade_parts.append(
                f"[{v_in}][v{i+1}]xfade=transition=fade:duration={crossfade}:offset={offset:.6f}[xfv{i}];"
            )
            current_offset += durations[i] - crossfade

        filter_complex = "".join(filter_parts + xfade_parts)
        last_v = f"[xfv{n - 2}]"

        cmd = ["ffmpeg", "-y"] + inputs + [
            "-filter_complex", filter_complex,
            "-map", last_v,
            "-an",
            "-c:v", "libx264", "-preset", "ultrafast", "-r", str(fps), output_path
        ]
        print("[DEBUG] FFmpeg-Kommando:", " ".join(cmd))
        subprocess.run(cmd, check=True)

    else:
        concat_list = os.path.join(DEBUG_DIR, "concat_list.txt")
        with open(concat_list, "w") as f:
            for v in videos:
                f.write(f"file '{os.path.abspath(v)}'\n")
        subprocess.run([
            "ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i", concat_list,
            "-an", "-c:v", "libx264", "-preset", "ultrafast", "-r", str(fps), output_path
        ], check=True)

def validate_video(path):
    try:
        out = subprocess.check_output([
            "ffprobe", "-v", "error", "-show_entries",
            "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", path
        ]).strip()
        return out and float(out) > 0.5
    except:
        return False

def loop_until_duration(input_video, audio_path, output_path, fps):
    if not validate_video(input_video):
        print("Fehler: intermediate.mp4 ungültig oder leer")
        print(f"Datei: {input_video}")
        exit(1)

    audio_info = subprocess.check_output([
        "ffprobe", "-v", "error", "-show_entries",
        "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", audio_path
    ])
    audio_duration = float(audio_info.strip())
    print(f"Audiodauer: {audio_duration:.2f}s")

    subprocess.run([
        "ffmpeg", "-y",
        "-stream_loop", "-1", "-i", input_video,
        "-i", audio_path,
        "-map", "0:v:0",
        "-map", "1:a:0",
        "-t", str(audio_duration),
        "-c:v", "copy", "-c:a", "aac", "-r", str(fps), output_path
    ], check=True)

def main():
    args = parse_args()
    print("Starte Verarbeitung...")

    print("Bereite Videos ohne Audiospuren vor...")
    prepared_videos = prepare_videos(args.videos)

    if args.rc:
        print("Reverse Crossfade Modus aktiv – Ping und Pong bleiben einzeln")
        video_list = create_pingpong_videos(prepared_videos)
    elif args.reverse:
        print("Ping-Pong-Modus aktiv – baue Ping-Pong-Blöcke")
        video_list = create_pingpong_blocks(prepared_videos)
    else:
        video_list = prepared_videos

    intermediate = os.path.join(DEBUG_DIR, "intermediate.mp4")

    if args.crossfade > 0:
        print("Crossfade aktiv")
        build_ffmpeg_concat(video_list, intermediate, crossfade=args.crossfade, fps=args.fps)
    else:
        print("Kein Crossfade – einfach aneinanderhängen")
        build_ffmpeg_concat(video_list, intermediate, crossfade=0, fps=args.fps)

    print("Erzeuge finalen Export...")
    loop_until_duration(intermediate, args.audio, "output.mp4", fps=args.fps)

    print("Fertig: output.mp4")
    print(f"Log-Datei: {LOGFILE}")

if __name__ == "__main__":
    main()