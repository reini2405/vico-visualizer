# modules/timeline/timeline_canvas.py
import json
from PySide6.QtWidgets import QWidget, QMenu, QInputDialog, QComboBox, QDialog, QVBoxLayout, QLabel, QPushButton
from PySide6.QtGui import QPainter, QColor, QPen, QAction
from PySide6.QtCore import Qt, QRectF, QPointF, QEvent
import numpy as np
from pydub import AudioSegment

EFFECT_COLORS = {
    "color": QColor("#ff4444"),
    "zoom": QColor("#3399ff"),
    "shake": QColor("#33cc33"),
    "ripple": QColor("#cc66ff"),
}

class EffectDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Effekt zuweisen")
        layout = QVBoxLayout()

        self.effect_name, ok = QInputDialog.getText(self, "Effektname", "Effektname eingeben:")

        self.action_box = QComboBox()
        self.action_box.addItems(["start", "end"])
        layout.addWidget(QLabel("Effektaktion wählen:"))
        layout.addWidget(self.action_box)

        self.ok_button = QPushButton("OK")
        self.ok_button.clicked.connect(self.accept)
        layout.addWidget(self.ok_button)

        self.setLayout(layout)

    def get_effect(self):
        return self.effect_name, self.action_box.currentText()

class TimelineCanvas(QWidget):
    def __init__(self, duration=180, parent=None):
        super().__init__(parent)
        self.duration = duration
        self.zoom = 0.3
        self.setMinimumHeight(150)
        self.playhead_position = 0
        self.markers = []
        self.effects = {}
        self.setMouseTracking(True)
        self.audio_waveform_left = []
        self.audio_waveform_right = []

    def resizeEvent(self, event):
        if self.duration > 0:
            self.zoom = self.width() / (self.duration * 100)
        self.update()
        super().resizeEvent(event)

    def set_playhead(self, seconds):
        self.playhead_position = seconds
        self.update()

    def set_zoom(self, zoom_factor):
        self.zoom = zoom_factor
        self.update()

    def load_audio(self, filepath):
        try:
            audio = AudioSegment.from_file(filepath)
            samples = np.array(audio.get_array_of_samples())
            if audio.channels == 2:
                samples = samples.reshape((-1, 2))
                left = samples[:, 0]
                right = samples[:, 1]
            else:
                left = samples
                right = samples

            num_points = 1000
            factor = len(left) // num_points
            self.audio_waveform_left = left[:num_points * factor].reshape(-1, factor).mean(axis=1)
            self.audio_waveform_right = right[:num_points * factor].reshape(-1, factor).mean(axis=1)

            max_val = max(np.max(np.abs(self.audio_waveform_left)), np.max(np.abs(self.audio_waveform_right)))
            if max_val > 0:
                self.audio_waveform_left = self.audio_waveform_left / max_val
                self.audio_waveform_right = self.audio_waveform_right / max_val
        except Exception as e:
            print(f"Waveform konnte nicht geladen werden: {e}")

    def save_markers(self, path):
        try:
            with open(path, "w") as f:
                json.dump({"markers": self.markers, "effects": self.effects}, f)
        except Exception as e:
            print(f"Fehler beim Speichern der Marker: {e}")

    def load_markers(self, path):
        try:
            with open(path, "r") as f:
                data = json.load(f)
                self.markers = data.get("markers", [])
                self.effects = data.get("effects", {})
            self.update()
        except Exception as e:
            print(f"Fehler beim Laden der Marker: {e}")

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.fillRect(self.rect(), QColor("#1e1e1e"))

        width = self.width()
        height = self.height()
        pixels_per_second = self.zoom * 100
        ruler_height = 20

        pen = QPen(QColor("#aaaaaa"))
        painter.setPen(pen)
        range_end = int((self.duration + 9) // 10 * 10)
        for sec in range(0, range_end + 1, 10):
            x = int(sec * pixels_per_second)
            if x > width:
                break
            painter.drawLine(x, 0, x, ruler_height)
            painter.drawText(x + 2, 10, f"{sec}s")

        # Stereo-Waveform getrennt darstellen mit Trennlinie
        if len(self.audio_waveform_left) > 0:
            w_len = len(self.audio_waveform_left)
            spacing = width / w_len
            audio_color = QColor("#00aaff")
            painter.setPen(audio_color)

            left_top = ruler_height + 10
            right_top = ruler_height + 60
            waveform_height = 30

            for i in range(w_len):
                x = int(i * spacing)
                l_val = self.audio_waveform_left[i]
                r_val = self.audio_waveform_right[i]
                painter.drawLine(x, left_top + waveform_height, x, int(left_top + waveform_height - l_val * waveform_height))
                painter.drawLine(x, right_top, x, int(right_top - r_val * waveform_height))

            # Trennlinie
            painter.setPen(QPen(QColor("#444444"), 1, Qt.DashLine))
            painter.drawLine(0, ruler_height + 50, width, ruler_height + 50)

        # Effektspuren (mehrere Layer)
        effect_tracks = list(EFFECT_COLORS.keys())
        track_height = 8
        base_y = height - 30

        for marker_time, info in self.effects.items():
            effect = info.get("effect")
            if effect not in EFFECT_COLORS:
                continue
            color = EFFECT_COLORS[effect]
            effect_index = effect_tracks.index(effect)
            y_offset = base_y - effect_index * (track_height + 4)

            x = int(float(marker_time) * pixels_per_second)
            painter.setPen(Qt.NoPen)
            painter.setBrush(color)
            painter.drawRect(x, y_offset, 6, track_height)

        playhead_x = int(self.playhead_position * pixels_per_second)
        playhead_pen = QPen(QColor("#ff0000"), 2)
        painter.setPen(playhead_pen)
        painter.drawLine(playhead_x, 0, playhead_x, height)

    def mousePressEvent(self, event):
        pixels_per_second = self.zoom * 100
        clicked_second = event.position().x() / pixels_per_second

        if event.button() == Qt.LeftButton:
            self.markers.append(clicked_second)
            self.effects[str(clicked_second)] = {"effect": "manual", "action": "start"}
            self.update()

        elif event.button() == Qt.RightButton:
            closest = None
            for m in self.markers:
                if abs(m - clicked_second) <= 0.5:
                    closest = m
                    break
            if closest is not None:
                menu = QMenu(self)
                delete_action = QAction("Marker löschen", self)
                effect_action = QAction("Effekt zuweisen", self)

                def delete():
                    self.markers.remove(closest)
                    self.effects.pop(str(closest), None)
                    self.update()

                def assign_effect():
                    dialog = EffectDialog(self)
                    if dialog.exec():
                        name, action = dialog.get_effect()
                        if name:
                            self.effects[str(closest)] = {"effect": name, "action": action}
                            self.update()

                delete_action.triggered.connect(delete)
                effect_action.triggered.connect(assign_effect)
                menu.addAction(delete_action)
                menu.addAction(effect_action)
                menu.exec(event.globalPosition().toPoint())
